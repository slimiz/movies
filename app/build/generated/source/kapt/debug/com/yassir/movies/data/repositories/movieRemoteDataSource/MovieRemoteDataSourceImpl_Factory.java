// Generated by Dagger (https://dagger.dev).
package com.yassir.movies.data.repositories.movieRemoteDataSource;

import android.content.Context;
import com.yassir.movies.data.mappers.MovieMapper;
import com.yassir.movies.data.remote.api.MovieApiService;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MovieRemoteDataSourceImpl_Factory implements Factory<MovieRemoteDataSourceImpl> {
  private final Provider<MovieApiService> movieApiServiceProvider;

  private final Provider<MovieMapper> movieMapperProvider;

  private final Provider<Context> contextProvider;

  public MovieRemoteDataSourceImpl_Factory(Provider<MovieApiService> movieApiServiceProvider,
      Provider<MovieMapper> movieMapperProvider, Provider<Context> contextProvider) {
    this.movieApiServiceProvider = movieApiServiceProvider;
    this.movieMapperProvider = movieMapperProvider;
    this.contextProvider = contextProvider;
  }

  @Override
  public MovieRemoteDataSourceImpl get() {
    return newInstance(movieApiServiceProvider.get(), movieMapperProvider.get(), contextProvider.get());
  }

  public static MovieRemoteDataSourceImpl_Factory create(
      Provider<MovieApiService> movieApiServiceProvider, Provider<MovieMapper> movieMapperProvider,
      Provider<Context> contextProvider) {
    return new MovieRemoteDataSourceImpl_Factory(movieApiServiceProvider, movieMapperProvider, contextProvider);
  }

  public static MovieRemoteDataSourceImpl newInstance(MovieApiService movieApiService,
      MovieMapper movieMapper, Context context) {
    return new MovieRemoteDataSourceImpl(movieApiService, movieMapper, context);
  }
}
