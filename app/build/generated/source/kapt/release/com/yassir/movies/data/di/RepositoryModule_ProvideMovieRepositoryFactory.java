// Generated by Dagger (https://dagger.dev).
package com.yassir.movies.data.di;

import com.yassir.movies.data.repositories.movieLocalDataSource.MovieLocalDataSource;
import com.yassir.movies.data.repositories.movieRemoteDataSource.MovieRemoteDataSource;
import com.yassir.movies.domain.repositories.MovieRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepositoryModule_ProvideMovieRepositoryFactory implements Factory<MovieRepository> {
  private final RepositoryModule module;

  private final Provider<MovieLocalDataSource> movieLocalDataSourceProvider;

  private final Provider<MovieRemoteDataSource> movieRemoteDataSourceProvider;

  public RepositoryModule_ProvideMovieRepositoryFactory(RepositoryModule module,
      Provider<MovieLocalDataSource> movieLocalDataSourceProvider,
      Provider<MovieRemoteDataSource> movieRemoteDataSourceProvider) {
    this.module = module;
    this.movieLocalDataSourceProvider = movieLocalDataSourceProvider;
    this.movieRemoteDataSourceProvider = movieRemoteDataSourceProvider;
  }

  @Override
  public MovieRepository get() {
    return provideMovieRepository(module, movieLocalDataSourceProvider.get(), movieRemoteDataSourceProvider.get());
  }

  public static RepositoryModule_ProvideMovieRepositoryFactory create(RepositoryModule module,
      Provider<MovieLocalDataSource> movieLocalDataSourceProvider,
      Provider<MovieRemoteDataSource> movieRemoteDataSourceProvider) {
    return new RepositoryModule_ProvideMovieRepositoryFactory(module, movieLocalDataSourceProvider, movieRemoteDataSourceProvider);
  }

  public static MovieRepository provideMovieRepository(RepositoryModule instance,
      MovieLocalDataSource movieLocalDataSource, MovieRemoteDataSource movieRemoteDataSource) {
    return Preconditions.checkNotNullFromProvides(instance.provideMovieRepository(movieLocalDataSource, movieRemoteDataSource));
  }
}
