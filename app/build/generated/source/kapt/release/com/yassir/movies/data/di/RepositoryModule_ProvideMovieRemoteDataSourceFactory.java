// Generated by Dagger (https://dagger.dev).
package com.yassir.movies.data.di;

import android.content.Context;
import com.yassir.movies.data.mappers.MovieMapper;
import com.yassir.movies.data.remote.api.MovieApiService;
import com.yassir.movies.data.repositories.movieRemoteDataSource.MovieRemoteDataSource;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata("dagger.hilt.android.qualifiers.ApplicationContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepositoryModule_ProvideMovieRemoteDataSourceFactory implements Factory<MovieRemoteDataSource> {
  private final RepositoryModule module;

  private final Provider<MovieApiService> movieApiServiceProvider;

  private final Provider<MovieMapper> movieMapperProvider;

  private final Provider<Context> contextProvider;

  public RepositoryModule_ProvideMovieRemoteDataSourceFactory(RepositoryModule module,
      Provider<MovieApiService> movieApiServiceProvider, Provider<MovieMapper> movieMapperProvider,
      Provider<Context> contextProvider) {
    this.module = module;
    this.movieApiServiceProvider = movieApiServiceProvider;
    this.movieMapperProvider = movieMapperProvider;
    this.contextProvider = contextProvider;
  }

  @Override
  public MovieRemoteDataSource get() {
    return provideMovieRemoteDataSource(module, movieApiServiceProvider.get(), movieMapperProvider.get(), contextProvider.get());
  }

  public static RepositoryModule_ProvideMovieRemoteDataSourceFactory create(RepositoryModule module,
      Provider<MovieApiService> movieApiServiceProvider, Provider<MovieMapper> movieMapperProvider,
      Provider<Context> contextProvider) {
    return new RepositoryModule_ProvideMovieRemoteDataSourceFactory(module, movieApiServiceProvider, movieMapperProvider, contextProvider);
  }

  public static MovieRemoteDataSource provideMovieRemoteDataSource(RepositoryModule instance,
      MovieApiService movieApiService, MovieMapper movieMapper, Context context) {
    return Preconditions.checkNotNullFromProvides(instance.provideMovieRemoteDataSource(movieApiService, movieMapper, context));
  }
}
